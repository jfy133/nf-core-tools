#!/usr/bin/env python

import os
import psutil

import questionary  ## in requirements.txt but not found?

from config_utils import getsysinfo

## Check for existing config file to ensure no unwanted overwrite

configname = "custom"
configname = questionary.path("What should your new config file be named?", default="custom").ask()

if os.path.isfile(configname + ".config"):
    q_overwrite = questionary.select("Existing config detected. Overwrite?", choices=["Yes", "No"], default="No").ask()
    if q_overwrite == "Yes":
        os.remove(configname + ".config")
    else:
        pass

## Context to build for to guide which type of config to build

q_configtype = questionary.select(
    "For which type of infrastructure are you writing a config for?",
    choices=["Laptop/Desktop/Single Node Server", "HPC cluster"],
).ask()

max_cpus = psutil.cpu_count()
max_memory = psutil.virtual_memory().total / 1024 / 1024 / 1024

## User information
profile_contact = questionary.text(
    "What is your name",
).ask()

profile_handle = questionary.text("What your GitHub handle (optional)", default="").ask()

## Query container engines
# TODO

## Ask if cache dir required
# TODO

## Write parsed config to file

f = open(configname + ".config", "a")
## TODO move to dictionary and function to write dictionary
f.write(
    "/*\nConfig auto-generated by nf-core tools (https://nf-co.re).\nPlease check config before using, no warranty is provided to the accuracy of the output!\n*/\n\n"
)
f.write("params.config_profile_description = '" + configname + " config generated by nf-core tools'" + "\n")
f.write("params.config_profile_contact = '" + profile_contact + "'\n")
f.write("params.max_cpus = " + str(max_cpus) + "\n")
f.write("params.max_memory = " + str("{:.0f}".format(max_memory)) + ".GB" + "\n")
f.close()


##################################

## Get operating system
# os_type = subprocess.run(["uname"], stdout=subprocess.PIPE).stdout.decode("utf-8")
# print(os_type)
