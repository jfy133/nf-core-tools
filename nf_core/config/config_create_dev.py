#!/usr/bin/env python

import create_param_scope
import create_container_scope

##################
## Params scope ##
##################

configname = create_param_scope.ask_config_name()
configtype = create_param_scope.ask_config_type()
maxresources = create_param_scope.retrieve_computational_resources()
configuser = create_param_scope.ask_user_name()

configuserstring = (
    configuser["profile_contact"] + " (" + configuser["profile_handle"] + ")"
    if configuser["profile_handle"] != ""
    else configuser["profile_contact"]
)

#####################
## Container scope ##
#####################

containeroptions = create_container_scope.create_tool_options()
containerchoice = create_container_scope.ask_preferred_container(containeroptions)
create_container_scope.ask_cache_requested()

## TODO Ask if cache dir required

#################
## Tower scope ##
#################

##################
## Write config ##
##################

f = open(configname + ".config", "a")
## TODO move to dictionary and function to write dictionary
f.write(
    "/*\nConfig auto-generated by nf-core tools (https://nf-co.re).\nPlease check config before using, no warranty is provided to the accuracy of the output!\n*/\n\n"
)
f.write("params.config_profile_description = '" + configname + " config generated by nf-core tools'" + "\n")
## TODO: dynamically insert handle if exists
f.write("params.config_profile_contact = '" + configuserstring + "'\n")

f.write("params.max_cpus = " + str(maxresources["max_cpus"]) + "\n")
f.write("params.max_memory = " + str("{:.0f}".format(maxresources["max_memory"])) + ".GB" + "\n")

if containerchoice != "conda":
    f.write(containerchoice + "." + "autoMounts = true")

f.close()


##################################

## Get operating system
# os_type = subprocess.run(["uname"], stdout=subprocess.PIPE).stdout.decode("utf-8")
# print(os_type)
